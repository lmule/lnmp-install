
# Test-case try to exercise truncate operation with limited number of rsegs
# which then fails and mark table as corrupted. Any operation post this
# should be blocked with safe exit. (no crash is expected)

--source include/have_innodb.inc
# we need to limit rsegs so craft a real world situation that is less likely
# to happen but a rare possibility. limit functionality is debug only.
--source include/have_debug.inc

call mtr.add_suppression("InnoDB: Warning: cannot find a free slot for an undo log. Do you have too");
call mtr.add_suppression("Flagged corruption of PRIMARY in table.*in CHECK TABLE");
call mtr.add_suppression("Cannot open table test.* from the internal data dictionary");

#-------------------------------------------------------------------------------
#
# create test-bed
#
let existing_rseg_slots = `select @@innodb_trx_rseg_n_slots_debug`;

#-------------------------------------------------------------------------------
#
# Try to truncate the table. Truncate at-least need 2 rsegs to operate.
#
use test;
set global innodb_trx_rseg_n_slots_debug=1;
#
create table t1 (a int, primary key pk(a)) engine = innodb;
#
--error ER_GET_ERRNO
truncate table t1;
--error ER_NO_SUCH_TABLE
insert into t1 select a, b+32 from t1;
check table t1;
drop table t1;

#-------------------------------------------------------------------------------
#
# cleanup test-bed
#
eval set global innodb_trx_rseg_n_slots_debug = $existing_rseg_slots;
